#!/usr/bin/python

"""
Character generator for Mongoose Traveller. Any unspecified options will be
generated randomly.

Usage: travgen char [--name NAME] [--homeworld WORLD] [--ethnicity ETHNICITY]
                    [--gender GENDER] [--upp UPP] [--method METHOD] [--rand-age]
                    [--terms TERMS] [--path PATH] [--expansions EXPANSIONS]
       travgen animal [--terrain TERRAIN] [--behavior BEHAVIOR] [--order ORDER]
                      [--sentient]
       travgen UPP [--method STR ]
       travgen roll DICE
       travgen (-h | --help)

Dice Roll Arguments:
    DICE    Number and sides of dice in '#d#' format, e.g., 2d6.

Character Generation Options:
    -n --name STR          Character name.
    -w --homeworld STR     Character's world of origin.
    -e --ethnicity STR     Ethnic group and random naming convention;
                             currently supports: American, Arabic, Brazilian,
                             British, Chechen, Chinese, Czech, Danish,
                             Filipino, Finnish, French, German, Greek,
                             Hungary, Irish, Italian, Jamaican, Japanese,
                             Korean, Mongolian, North Indian, Portuguese,
                             Roma, Russian, Senegalese, Sicilian, Spanish,
                             Thai.
    -g --gender STR        Male or female.
    -a --rand-age          Randomize term length (+/-1 year).
    -u --upp HEX           Supply a pre-generated UPP or it will be randomly
                             generated.
    -m --method STR        If no UPP, method for rolling characteristics:
                             normal, heroic, superheroic, mediocre, or
                             extreme. [default: normal]
    -t --terms INT         Number of terms to serve. [default: 3]
    -p --path STR          Colon-delimited career path of the form:
                             "career:spec::career:spec::...".
    -x --expansions LIST   Comma-delimited list of Traveller expansions to
                             include for career options. Currently supports:
                             Agent, Dilettante, Scoundrel, and Cthonian Stars.

Animal Generation Options:
    --terrain TERRAIN     One of: Mountain, Hills, Open Ocean, Clear, Riverbank,
                            Swamp, Deep Ocean, Woods, Plain/Prairie, Forest,
                            Ocean Shallows, Rainforest, Rough, Beach, Desert,
                            Jungle.
    --behavior BEHAVIOR   One of: Intimidator, Siren, Reducer, Trapper,
                            Intermittent, Hijacker, Eater, Pouncer, Hunter,
                            Filter, Grazer, Carrion-Eater, Chaser, Brute Killer,
                            Gatherer, Swift Killer.
    --order ORDER         One of: Scavenger, Omnivore, Herbivore, Carnivore. 
    --sentient            Creature has an intelligence greater than 1.

Other Options:
    -h --help
    --version

"""

__author__ = "GVH"
__version__ = "0.0.6"


import sys
from docopt import docopt
from traveller.character import Character
from traveller.attributes import Stats
from traveller.animal import Animal
from traveller.dice import die
from traveller.career_data import *


EXPANSIONS = ["Cthonian Stars", "Agent", "Scoundrel", "Dilettante"]


def set_expansions(E):
    global CAREERS
    global FALLBACK_CAREERS
    for exp in E:
        if exp == "Cthonian Stars":
            CAREERS.update(CTHONIAN_STARS)
            del CAREERS["Nobility"]
        if exp == "Dilettante":
            CAREERS.update(DILETTANTE)
        if exp == "Agent":
            CAREERS.update(AGENT)
            del CAREERS["Agent"]
        if exp == "Scoundrel":
            CAREERS.update(SCOUNDREL)
            del CAREERS["Drifter"]
            if "Drifter" in FALLBACK_CAREERS:
                FALLBACK_CAREERS.remove("Drifter")
            FALLBACK_CAREERS.extend(("Wanderer", "Scavenger"))


def up1(text):
    return text[0].upper()+text[1:]


if __name__ == "__main__":

    args = {k.replace("-", ""): v
            for k, v in docopt(__doc__, version=__version__).items()}

    if args['animal']:
        animal = Animal(behavior=args['behavior'],
                        order=args['order'],
                        terrain=args['terrain'],
                        sentient=args['sentient'])
        print animal
        sys.exit()

    if args['UPP']:
        upp = Stats(method=args['method'])
        print upp
        sys.exit()

    if args['roll']:
        n, d = [int(x) for x in args['DICE'].split('d')]
        roll = [str(die(d)(1)) for i in range(n)]
        print ' '.join(roll)
        sys.exit()

    if args['path']:
        path = [term.split(":")
                for term in args['path'].split("::")]
    else:
        path = None

    if args['expansions'] == 'all':
        set_expansions(EXPANSIONS)
    elif args['expansions']:
        set_expansions([up1(a.strip()) for a in args['expansions'].split(',')])

    try:
        c = Character(name=args["name"],
                      homeworld=args["homeworld"],
                      gender=args["gender"],
                      upp=args["upp"],
                      ethnicity=args["ethnicity"],
                      terms=int(args["terms"]),
                      path=path,
                      method=args["method"],
                      rand_age=args["randage"])
        sys.stdout.write(repr(c)+"\n")
    except KeyboardInterrupt:
        pass
    except:
        raise
        print "Something unfortunate has happened."

    sys.exit()
